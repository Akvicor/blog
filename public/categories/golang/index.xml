<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Akvicor&#39;s Blog</title>
    <link>https://blog.akvicor.com/categories/golang/</link>
    <description>Recent content in Golang on Akvicor&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 Sep 2024 00:08:45 +0800</lastBuildDate>
    <atom:link href="https://blog.akvicor.com/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gorm 数据库操作</title>
      <link>https://blog.akvicor.com/posts/golang/gorm/</link>
      <pubDate>Fri, 26 Jan 2024 13:44:12 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/gorm/</guid>
      <description>RawMessage Scan&amp;amp;Value json.RawMessage 以[]byte形式存储json数据，但在父结构体marshal和unmarshal时不会重复序列化，仅仅将数据复制到新json字符串中 通过继承Scanne</description>
    </item>
    <item>
      <title>HTTP GET/POST</title>
      <link>https://blog.akvicor.com/posts/golang/http_get_post/</link>
      <pubDate>Sat, 20 Jan 2024 13:01:20 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/http_get_post/</guid>
      <description>接收端 首先我们有这样一段测试代码来接收 POST 请求，并返回其接收到的字段信息。 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func urlencodedHandler(w http.ResponseWriter, r *http.Request) { err := r.ParseForm() if err != nil { log.Printf(&amp;#34;r.ParseForm(): %v&amp;#34;, err) return } result := &amp;#34;&amp;#34; for k, v := range r.Form { result += fmt.Sprintf(&amp;#34;%s:%v\n&amp;#34;, k, v) } fmt.Fprintf(w,</description>
    </item>
    <item>
      <title>队列 Queue</title>
      <link>https://blog.akvicor.com/posts/golang/queue/</link>
      <pubDate>Sat, 06 Jan 2024 20:07:41 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/queue/</guid>
      <description>介绍 元素为[]byte的队列的golang实现（适用于多线程环境下，当然单线程也能用 如果想更改队列的元素类型，请自行将queue [][]byte中的[]byte</description>
    </item>
    <item>
      <title>拉取私有Go Module</title>
      <link>https://blog.akvicor.com/posts/golang/private_go_module/</link>
      <pubDate>Thu, 30 Nov 2023 08:53:24 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/private_go_module/</guid>
      <description>若拉取时提示无法验证包，可以添加以下环境变量以信任此地址 关闭指定域名的包验证 export GONOSUMDB=git.akvicor.com 关闭所有域名的包验证 export GOSUMDB=off</description>
    </item>
    <item>
      <title>窗口置顶</title>
      <link>https://blog.akvicor.com/posts/golang/windows_always_on_top/</link>
      <pubDate>Sun, 11 Jun 2023 13:33:37 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/windows_always_on_top/</guid>
      <description>将窗口标题中带有指定字符串的窗口置顶，使其显示在所有窗口之上 package main import ( &amp;#34;golang.org/x/sys/windows&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;syscall&amp;#34; &amp;#34;unsafe&amp;#34; ) func AlwaysOnTop() { SetWindowAlwaysOnTop(GetWindowHandleByWindowName(&amp;#34;Title&amp;#34;)) } const SWP_NOSIZE = uintptr(0x0001) const SWP_NOMOVE = uintptr(0x0002) // This is dumb but Go doesn&amp;#39;t like the inline conversion (see above image). func IntToUintptr(value int) uintptr { return uintptr(value) } func SetWindowAlwaysOnTop(hwnd uintptr) { user32dll :=</description>
    </item>
    <item>
      <title>运行时隐藏控制台</title>
      <link>https://blog.akvicor.com/posts/golang/hide_console/</link>
      <pubDate>Sun, 11 Jun 2023 12:40:38 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/hide_console/</guid>
      <description>常用于go编写的gui项目 go build -ldflags &amp;#34;-H windowsgui&amp;#34;</description>
    </item>
    <item>
      <title>go编译文件带上图标</title>
      <link>https://blog.akvicor.com/posts/golang/build_with_ico/</link>
      <pubDate>Sun, 11 Jun 2023 01:07:09 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/build_with_ico/</guid>
      <description>默认的go build -o xxx.exe这样是没有图标的，不怎么好看。 首先下载文件： git clone https://github.com/akavel/rsrc.git 进入目录,把上面的代码编译一下 go build rsrc.go # 然后有个rsrc.exe文件 就在rsrc的目</description>
    </item>
    <item>
      <title>Note</title>
      <link>https://blog.akvicor.com/posts/golang/note/</link>
      <pubDate>Fri, 10 Feb 2023 14:57:47 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/note/</guid>
      <description>foreach变量 错误代码 for _, v := range histories { InsertByHistory(&amp;amp;v) } 正确代码 for _, v := range histories { h := v InsertByHistory(&amp;amp;h) } 笔记 如以上代码，传递指针时必须声明一个新变量存储v，否则会导致传递给函数的是hist</description>
    </item>
    <item>
      <title>Golang Install</title>
      <link>https://blog.akvicor.com/posts/golang/install/</link>
      <pubDate>Thu, 14 Jul 2022 16:49:29 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/golang/install/</guid>
      <description>选择要下载的版本 https://go.dev/dl/ 下载安装 # 下载 wget https://go.dev/dl/go1.18.4.linux-amd64.tar.gz # 解压 mv go1.18.4.linux-amd64.tar.gz go.tar.gz tar -C /usr/local -xzf go.tar.gz 配置环境变量 # 编辑.bashrc vim /root/.bashrc # 添加如下内容 export GOPATH=/root/go export PATH=/usr/local/go/bin:$PATH:$GOPATH/bin # 设置代理 # Set the GOPROXY environment variable export GOPROXY=https://goproxy.io,direct # Set environment variable allow bypassing the proxy for</description>
    </item>
  </channel>
</rss>
