<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Akvicor&#39;s Blog</title>
    <link>https://blog.akvicor.com/categories/c/</link>
    <description>Recent content in C on Akvicor&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 15 Sep 2024 15:40:28 +0800</lastBuildDate>
    <atom:link href="https://blog.akvicor.com/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Structure Alignment</title>
      <link>https://blog.akvicor.com/posts/c/data_structure_alignment/</link>
      <pubDate>Mon, 27 Feb 2023 07:14:03 +0800</pubDate>
      <guid>https://blog.akvicor.com/posts/c/data_structure_alignment/</guid>
      <description>The CPU in modern computer hardware performs reads and writes to memory most efficiently when the data is naturally aligned, which generally means that the data&amp;rsquo;s memory address is a multiple of the data size. For instance, in a 32-bit architecture, the data may be aligned if the data is stored in four consecutive bytes and the first byte lies on a 4-byte boundary.&#xA;If the highest and lowest bytes in a datum are not within the same memory word the computer must split the datum access into multiple memory accesses.</description>
    </item>
  </channel>
</rss>
